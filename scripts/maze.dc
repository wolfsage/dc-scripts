# Need 0 precision for % to work right
0k

# Get our PRNG val from argv
?sk

# Used registers:
# c - check bit macro
# s - set bit macro
# b - used by c (check/set bits) stores bit
# v - used by c (check/set bits) stores value
# m - maybe set bit on macro
# e - maybe set bit off macro
# n - set bit o(n) macro
# f - set bit of(f) macro
# j - junk register (dc doens't let you just pop a value off the stack??)

# check bit, stack should bit,val
# Takes two values off of the stack and stores them in registers b,v
# Returns the answer on the stack
# Ex: 5 0 lcx - See if bit 0 is set for 5
[
  sb # bit (index) - 0 based
  sv # val
  # (val/(base ^ index)) % base
  lv
  2 lb ^ # base 2
  /
  2 %
]sc

# set bit, stack should be on_or_off,bit,val
# Takes three values off of the stack and stores them in registers o,b,v
# If o is 1, sets the bit to 1, otherwise to 0
# When done, puts the value back on the stack
# Ex: 5 2 0 lsx - Set 2nd bit to 0 - turn 101 to 001
# Ex: 5 2 1 lsx - Set 2nd bit to 1 - turn 001 to 101
[
  so # on or off (1|0)
  sb # bit (index) - 0 based
  sv # val

  # Set up our stack for set bit to on/off
  lv
  lb

  lv
  lb

  lo 0 =e # 0? Maybe set bit to off
  lo 1 =m # 1? Maybe set bit to on
]ss

# maybe set bit to off
[
  lcx 1=f
  # Didn't? Pop bit off stack leaving value
  sj
]se

# maybe set bit to on
[
  lcx 0=n
  # Didn't? Pop bit off stack leaving value
  sj
]sm

# set bit to off, private method. Use s above instaed
[
  2 r ^ -
  # Return passed maybe *
  2Q
]sf

# set bit to on, private method. Use s above instead
[
  2 r ^ +
  # Return passed maybe *
  2Q
]sn

# Set maze width to 10, height to 10
10 sw
10 sh

# Fill out maze

# Leave this macro
[q]sq

# Return north neighbor or -1. Expects current cell idx on the stack
[
  sC # store that for later use
  lC # load it back in
  lw - d _1 <q
  sj
  _1
]sN

# Return east neighbor or -1. Expects current cell idx on the stack
[
  sC # store that for later use
  lC # load it back in
  1 +
  d lw % 0 !=q
  sj
  _1
]sE

# Return south neighbor or -1. Expects current cell idx on the stack
[
  sC # store that for later use
  lC # load it back in
  lw + d lh lh * >q
  sj
  _1
]sS

# Return west neighbor or -1. Expects current cell idx on the stack
[
  sC # store that for later use
  lC # load it back in
  1 -
  d 1 + lw % 0 !=q
  sj
  _1
]sW

# Junk top of stack macro
[sj]sJ

# Leave this macro and the one above it
[2q]sQ

# These 4 are the bits (just the bits)

[0]s0 # north
[1]s1 # south
[2]s2 # east
[3]s3 # west

# Cell value getter. Takes idx from stack
[
  ;m
]sG

# Cell value setter. Stack should be val, idx
[
  :m
]sX

# West linker
[
  # Tell Cell they have a neighbor to the west
  lC lGx 3 1 lsx lC lXx 

  # Tell neighbor they have a neighbor to the east
  lT lGx 2 1 lsx lT lXx
]sU

# East linker
[
  # Tell Cell they have a neighbor to the east
  lC lGx 2 1 lsx lC lXx

  # Tell neighbor they have a neighbor to the west
  lT lGx 3 1 lsx lT lXx
]sI

# North linker
[
  # Tell Cell they have a neighbor to the north
  lC lGx 0 1 lsx lC lXx

  # Tell neighbor they have a neighbor to the south
  lT lGx 1 1 lsx lT lXx
]sO

# South linker
[
  # Tell Cell they have a neighbor to the south
  lC lGx 1 1 lsx lC lXx

  # Tell neighbor they have a neighbor to the north
  lT lGx 0 1 lsx lT lXx
]sP

# Link register C has the cell we're operating on. Top of stack is
# the cell to link to. We have to calculate direction
[
  sT # Store that

  lC lT -
  # Cell - To = 1? West
  # Cell - To = -1? East
  # Cell - To = rows? North
  # Cell - To = -rows)? South
  # Otherwise croak - something's effed
  d 1=U
  d _1=I
  d lw=O
  d lw _1 * =P

  # Clean up the stack
  sj
]sl

# Swapper
[r]sR

# PRNG
[
  2 32 ^ lk * 21343 + 234241 % sk lk
]sK

# Random link
[
  lKx 2 %

  # Swap if we got a 1
  1=R

  # Link
  llx

  # Drop the other
  sj
]sr

# Do with each cell
[
  lC 1+ d sC        # Increment our cell idx

  lw lh * =q        # Quit if we hit our length * width

  # Get north neighbor if we have one
  lC lNx d _1=J

  # Get our east neighbor if we have one
  lC lEx d _1=J

  # Depth tells us how many neighbors

  # 1 item? Just link
  z 1=l

  # 2 items? Random link
  z 2=r

  lMx              # Loop
]sM

_1sC

lMx

# Reset our idx
_1sC

# And this is our renderer
[+]n
lw sd

# Drop top border
[
  ld d1- sd        # Decrement our temp width

  0=q

  [---+]n

  lBx
]sB

lBx

[]psj

[
  [ ]n
]s.

[
  [|]n
]s;


# Draw east wall or door
[
  # East is linked with us?
  lC lGx 2 lcx 1=.
  sj

  # East is not linked with us
  lC lGx 2 lcx 1!=;
  sj
]sD

# Draw south wall or door
[
  # South is linked with us?
  lC lGx 1 lcx 1=\
  sj

  # South is not linked with us
  lC lGx 1 lcx 1!=:
  sj
]sL

[
  [---]n
]s:

[
  [   ]n
]s\

# Draws our eastern walls
[
  lC
  [   ]n

  # Get our east neighbor if we have one, and draw a wall or door
  d lEx _1!=D
  sj

  # At the end? Draw a final wall
  d lEx _1=;
  sj

  d lEx _1=q       # Quit if we can't go further east
  sj

  lC 1+ sC        # Increment our cell idx

  lzx              # Loop
]sz

# Draws our southern walls
[
  lC

  # Get our south neighbor if we have one, and draw a wall or door
  d lSx _1!=L
  sj

  # At the end? Draw a final wall
  d lSx _1=:
  sj

  [+]n

  d lEx _1=q       # Quit if we can't go further east
  sj

  lC 1+ sC        # Increment our cell idx

  lxx              # Loop
]sx

_1 sH

# Our drawing main loop. Double-pass each row to draw walls and floors
[
  lH 1+ d sH       # Increment our loop counter

  lh =q            # Quit if we go over our height

  # Set our cell idx to the westernmost point for our row
  lH lw * sC

  [|]n

  # Draw our eastern walls
  lzx

  [] psj

  # Reset
  lH lw * sC

  [+]n

  # Draw our southern walls
  lxx
  []psj

  lFx               # Loop
]sF

# draw it
lFx
