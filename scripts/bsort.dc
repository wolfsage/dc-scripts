# A `dc` bubble sort algorithm

# Elements to sort
10 8 15 20 4 99 8 0 6 1 3

# How many elements to work on
11

# register 'a' is the count of elements to be worked on
sa

# register 'b' is the outer loop count
# register 'g' is the inner loop count
# register 'h' is the reset loop count (Always 'a 1-')
la 1- sb lasg lash

# register 'e' holds the sorted data temporarily

# register f holds the inner loop x/y are register to be compared
# will loop 'a 1-' times
[lgd1-sg 1>q dsx r dsy r ly lx <s Se lfx]sf

# register i holds the outer loop, will loop 'a 1-' times,
# calling the inner loop above
[lbd1-sb 0>q la sg lfx la 1- sh lcx lix]si

# register s is the swapper
[r]ss

# register 'c' is the restore-stack method, it puts all data
# on register 'e' back onto the stack
[lhd1-sh 0>q Le lcx]sc

# register 'q' ends the current macro loops
[2Q]sq

# main(), I suppose, if you're a C programmer
lix

# Print out results
[final]P []p

f
