# A `dc` bubble sort algorithm

# Elements to sort
10 8 15 20 4 99 8 0 6 1 3

# register 'a' is the count of elements to be worked on
z sa

# register 'b' is the outer loop count, goes 'a'-1..0
#   since bubble sort only needs n-1 passes
la 1- sb

# register 'g' is the inner loop count, goes 'a'-1..0
#   since if there's only 1 item on the stack we have
#   nothing to compare to
la 1- sg

# register 'h' is the reset loop count, goes 'a'-1..0
#   since the last element is always left on the main stack
la 1- sh

# register 'q' ends the current macro loops
[2Q]sq

# register 'c' is the restore-stack method, it puts all data
# on register 'e' back onto the stack
[
  lh d1- sh        # Decrement loop count by one
  0=q              # Quit if we hit 0
  Le               # Move our top value to main stack
  lcx              # Loop
]sc

# register s is the swapper of top two values
[r]ss

# Each pass of the inner loop (register 'f'), the top of the
# stack gets sorted and then one value (the highest) is pushed
# onto register 'e'. At the end of the inner loop, the register
# is drained back onto the main stack. register x and y are
# used to store temp values to be compared

# inner loop ('f')
[
  lg d1- sg        # Decrement loop count by one
  0=q              # Quit if we hit 0
  dsx              # Copy top value to x for comparison
  r                # swap stack so we can get at next val
  dsy              # Copy to y
  r                # Put stack back in previous state
  ly lx <s         # Duplicate top two values, compare,
                   # swap if x < y
  Se               # Store onto register 'e'
  lfx              # Loop
]sf

# Outer loop, calls inner loop 'a'-1 times
[
  lb d1- sb        # Decrement loop count by one
  0=q              # Quit if we hit 0
  la 1- sg         # Reset inner loop count
  lfx              # Run inner loop
  la 1- sh         # Reset the reset loop count
  lcx              # Run the reset loop
  lix              # Loop
]si

# main(), I suppose, if you're a C programmer
lix

# Print out results
[final]P []p

f
